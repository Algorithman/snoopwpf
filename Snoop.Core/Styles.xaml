<!--
(c) Copyright Cory Plotts.
This source is subject to the Microsoft Public License (Ms-PL).
Please see http://go.microsoft.com/fwlink/?LinkID=131993 for details.
All other rights reserved.
-->
<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:d="http://schemas.microsoft.com/expression/interactivedesigner/2006"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                    xmlns:controls="clr-namespace:Snoop.Controls"
                    mc:Ignorable="d">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="BaseStyles.xaml" />
        <ResourceDictionary Source="Controls/ProperTreeViewResources.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <!-- SimpleStyles.XAML defines a set of control styles which are simplified starting points for creating your own controls -->

    <!-- Brushes : These are used to define the color for background, foreground, selection, enabled etc of all controls
	If you want to change the color of a control you can just change the brush; if you want to add a new shape or change arrangement then also edit the template -->

    <!-- NormalBrush is used as the Background for SimpleButton, SimpleRepeatButton -->
    <LinearGradientBrush x:Key="NormalBrush" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#EEEE" Offset="0.0" />
        <GradientStop Color="#CCCC" Offset="1.0" />
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="NormalBorderBrush" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#CCCC" Offset="0.0" />
        <GradientStop Color="#4444" Offset="1.0" />
    </LinearGradientBrush>

    <!-- LightBrush is used for content areas such as Menu, Tab Control background -->
    <LinearGradientBrush x:Key="LightBrush" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#FFFF" Offset="0.0" />
        <GradientStop Color="#EEEE" Offset="1.0" />
    </LinearGradientBrush>


    <!-- Style and Template pairs are used to define each control Part -->
    <!-- The Style provides default values on the control; the Template gives the elements for each control -->

    <LinearGradientBrush x:Key="MouseOverBrush" EndPoint="1,0.5" StartPoint="0,0.5">
        <GradientStop Color="#FFFFFFFF" Offset="0.48" />
        <GradientStop Color="#FFB2E2FF" Offset="1" />
        <GradientStop Color="#FFBAE5FF" Offset="0" />
    </LinearGradientBrush>

    <!-- PressedBrush is used for Pressed in Button, Radio Button, CheckBox -->
    <LinearGradientBrush x:Key="PressedBrush" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#BBBB" Offset="0.0" />
        <GradientStop Color="#EEEE" Offset="0.1" />
        <GradientStop Color="#EEEE" Offset="0.9" />
        <GradientStop Color="#FFFF" Offset="1.0" />
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="PressedBorderBrush" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#4444" Offset="0.0" />
        <GradientStop Color="#8888" Offset="1.0" />
    </LinearGradientBrush>

    <!-- SelectedBackgroundBrush is used for the Selected item in ListBoxItem, ComboBoxItem-->
    <SolidColorBrush x:Key="SelectedBackgroundBrush" Color="#DDDD" />

    <!-- Disabled Brushes are used for the Disabled look of each control -->
    <SolidColorBrush x:Key="DisabledForegroundBrush" Color="#8888" />
    <SolidColorBrush x:Key="DisabledBackgroundBrush" Color="#EEEE" />
    <SolidColorBrush x:Key="DisabledBorderBrush" Color="#AAAA" />

    <!-- Used for background of ScrollViewer, TreeView, ListBox, Expander, TextBox, Tab Control -->
    <SolidColorBrush x:Key="WindowBackgroundBrush" Color="#FFFF" />

    <!-- DefaultedBorderBrush is used to show KeyBoardFocus -->
    <LinearGradientBrush x:Key="DefaultedBorderBrush" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#7777" Offset="0.0" />
        <GradientStop Color="#0000" Offset="1.0" />
    </LinearGradientBrush>

    <SolidColorBrush x:Key="SolidBorderBrush" Color="#8888" />
    <SolidColorBrush x:Key="LightBorderBrush" Color="#AAAA" />
    <SolidColorBrush x:Key="LightColorBrush" Color="#DDDD" />

    <Style x:Key="Snoop.Styles.ProperTreeView"
           TargetType="TreeView"
           BasedOn="{StaticResource Snoop.Styles.TreeView}">
    </Style>

    <!-- <Style x:Key="{x:Type StackPanel}" -->
    <!--        TargetType="{x:Type StackPanel}"> -->
    <!--     <Setter Property="Background" -->
    <!--             Value="Transparent" /> -->
    <!--     <Setter Property="Margin" -->
    <!--             Value="0" /> -->
    <!--     <Setter Property="OverridesDefaultStyle" -->
    <!--             Value="True" /> -->
    <!-- </Style> -->

    <!-- Simple Repeat Button - This is used by Simple ScrollBar for the up and down buttons -->
    <Style x:Key="SimpleRepeatButton" d:IsControlPart="True" TargetType="{x:Type RepeatButton}" BasedOn="{x:Null}">
        <Setter Property="Background" Value="{DynamicResource NormalBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Grid Style="{x:Null}">
                        <Border Style="{x:Null}" x:Name="Border" Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}" />
                        <ContentPresenter Style="{x:Null}" HorizontalAlignment="Center" x:Name="ContentPresenter"
                                          VerticalAlignment="Center" Content="{TemplateBinding Content}"
                                          ContentTemplate="{TemplateBinding ContentTemplate}"
                                          ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter Property="BorderBrush" Value="{DynamicResource DefaultedBorderBrush}"
                                    TargetName="Border" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" Value="{DynamicResource MouseOverBrush}" TargetName="Border" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" Value="{DynamicResource PressedBrush}" TargetName="Border" />
                            <Setter Property="BorderBrush" Value="{DynamicResource PressedBorderBrush}"
                                    TargetName="Border" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}"
                                    TargetName="Border" />
                            <Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}"
                                    TargetName="Border" />
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Simple Thumb - The Thumb is the draggable part of the Scrollbar -->
    <Style x:Key="SimpleThumbStyle" d:IsControlPart="True" TargetType="{x:Type Thumb}" BasedOn="{x:Null}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Grid Style="{x:Null}" Margin="0,0,0,0" x:Name="Grid">
                        <Rectangle Style="{x:Null}" HorizontalAlignment="Stretch" x:Name="Rectangle" VerticalAlignment="Stretch"
                                   Width="Auto" Height="Auto" RadiusX="2" RadiusY="2"
                                   Fill="{DynamicResource NormalBrush}" Stroke="{DynamicResource NormalBorderBrush}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True" />
                        <Trigger Property="IsMouseOver" Value="True" />
                        <Trigger Property="IsEnabled" Value="False" />
                        <Trigger Property="IsDragging" Value="True" />
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Simple ScrollRepeatButton Style - This RepeatButton is used above and below the Thumb in the Scrollbar. They are set to transparent si that they do not show over the scrollbar -->
    <Style x:Key="SimpleScrollRepeatButtonStyle" d:IsControlPart="True" TargetType="{x:Type RepeatButton}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Grid Style="{x:Null}">
                        <Rectangle Style="{x:Null}" Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}"
                                   StrokeThickness="{TemplateBinding BorderThickness}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Simple ScrollBar  This makes use of SimpleThumb, SimpleRepeatButton and SimpleScrollRepeatButton -->

    <Style x:Key="SimpleScrollBar" TargetType="{x:Type ScrollBar}">
        <Setter Property="Stylus.IsFlicksEnabled" Value="false" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                    <Grid Style="{x:Null}" x:Name="GridRoot"
                          Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"
                          Background="{TemplateBinding Background}">
                        <Grid.RowDefinitions>
                            <RowDefinition Style="{x:Null}" MaxHeight="18" />
                            <RowDefinition Style="{x:Null}" Height="0.00001*" />
                            <RowDefinition Style="{x:Null}" MaxHeight="18" />
                        </Grid.RowDefinitions>

                        <RepeatButton x:Name="DecreaseRepeat" Style="{DynamicResource SimpleRepeatButton}"
                                      Command="ScrollBar.LineUpCommand">
                            <Grid Style="{x:Null}">
                                <Path Style="{x:Null}" x:Name="DecreaseArrow" Stroke="{TemplateBinding Foreground}" StrokeThickness="1"
                                      Data="M 0 4 L 8 4 L 4 0 Z" />
                            </Grid>
                        </RepeatButton>

                        <!-- Track is a special layout container which sizes the thumb and the repeat button which do jump scrolling either side of it -->
                        <Track Style="{x:Null}" Grid.Row="1" x:Name="PART_Track" Orientation="Vertical" IsDirectionReversed="true">
                            <Track.Thumb>
                                <Thumb Style="{DynamicResource SimpleThumbStyle}" />
                            </Track.Thumb>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton x:Name="PageUp" Style="{DynamicResource SimpleScrollRepeatButtonStyle}"
                                              Command="ScrollBar.PageDownCommand" />
                            </Track.IncreaseRepeatButton>
                            <Track.DecreaseRepeatButton>
                                <RepeatButton x:Name="PageDown" Style="{DynamicResource SimpleScrollRepeatButtonStyle}"
                                              Command="ScrollBar.PageUpCommand" />
                            </Track.DecreaseRepeatButton>
                        </Track>

                        <RepeatButton Grid.Row="2" x:Name="IncreaseRepeat" Style="{DynamicResource SimpleRepeatButton}"
                                      Command="ScrollBar.LineDownCommand">
                            <Grid Style="{x:Null}">
                                <Path Style="{x:Null}" x:Name="IncreaseArrow" Stroke="{TemplateBinding Foreground}" StrokeThickness="1"
                                      Data="M 0 0 L 4 4 L 8 0 Z" />
                            </Grid>
                        </RepeatButton>
                    </Grid>

                    <!-- This uses a single template for ScrollBar and rotate it to be Horizontal
					It also changes the commands so that the it does Left and Right instead of Up and Down Commands -->
                    <ControlTemplate.Triggers>
                        <Trigger Property="Orientation" Value="Horizontal">

                            <!-- Rotate the ScrollBar from Vertical to Horizontal -->
                            <Setter Property="LayoutTransform" TargetName="GridRoot">
                                <Setter.Value>
                                    <RotateTransform Angle="-90" />
                                </Setter.Value>
                            </Setter>

                            <!-- Track is bound to Orientation internally, so we need to rotate it back to Vertical -->
                            <Setter TargetName="PART_Track" Property="Orientation" Value="Vertical" />

                            <!-- Change the commands to do Horizontal commands -->
                            <Setter Property="Command" Value="ScrollBar.LineLeftCommand" TargetName="DecreaseRepeat" />
                            <Setter Property="Command" Value="ScrollBar.LineRightCommand" TargetName="IncreaseRepeat" />
                            <Setter Property="Command" Value="ScrollBar.PageLeftCommand" TargetName="PageDown" />
                            <Setter Property="Command" Value="ScrollBar.PageRightCommand" TargetName="PageUp" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Simple ScrollViewer
	ScrollViewer is a Grid control which has a ContentPresenter and a Horizontal and Vertical ScrollBar
	It is used by ListBox, MenuItem, ComboBox, and TreeView -->
    <Style x:Key="SimpleScrollViewer" TargetType="{x:Type ScrollViewer}" BasedOn="{x:Null}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid Style="{x:Null}" Background="{TemplateBinding Background}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Style="{x:Null}" Width="*" />
                            <ColumnDefinition Style="{x:Null}" Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Style="{x:Null}" Height="*" />
                            <RowDefinition Style="{x:Null}" Height="Auto" />
                        </Grid.RowDefinitions>
                        <ScrollContentPresenter Style="{x:Null}" Grid.Column="0" Grid.Row="0" Margin="{TemplateBinding Padding}"
                                                Content="{TemplateBinding Content}"
                                                ContentTemplate="{TemplateBinding ContentTemplate}"
                                                CanContentScroll="{TemplateBinding CanContentScroll}" />

                        <!-- The visibility of the ScrollBars is controlled by the implementation fo the control -->
                        <ScrollBar Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Grid.Column="0"
                                   Grid.Row="1" x:Name="PART_HorizontalScrollBar"
                                   Style="{DynamicResource SimpleScrollBar}" Orientation="Horizontal"
                                   Value="{Binding Path=HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
                                   ViewportSize="{TemplateBinding ViewportWidth}" Minimum="0"
                                   Maximum="{TemplateBinding ScrollableWidth}"
                                   AutomationProperties.AutomationId="HorizontalScrollBar" />
                        <ScrollBar Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Grid.Column="1"
                                   Grid.Row="0" x:Name="PART_VerticalScrollBar"
                                   Style="{DynamicResource SimpleScrollBar}" Orientation="Vertical"
                                   Value="{Binding Path=VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
                                   ViewportSize="{TemplateBinding ViewportHeight}" Minimum="0"
                                   Maximum="{TemplateBinding ScrollableHeight}"
                                   AutomationProperties.AutomationId="VerticalScrollBar" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <LinearGradientBrush EndPoint="0.498,0.952" StartPoint="0.498,0.038" x:Key="DarkBlue">
        <GradientStop Color="#FF021122" Offset="0" />
        <GradientStop Color="#FF052941" Offset="1" />
    </LinearGradientBrush>
    <LinearGradientBrush EndPoint="0.503,0" StartPoint="0.503,0.925" x:Key="ShineBrush1">
        <GradientStop Color="#0C5BBCFF" Offset="0" />
        <GradientStop Color="#3365C0FF" Offset="1" />
    </LinearGradientBrush>

    <Brush x:Key="DeepBlueColorBrush">#FF142947</Brush>

    <LinearGradientBrush EndPoint="0,1" StartPoint="0,0" x:Key="MetalGrad">
        <GradientStop Color="#FFEEEEEE" Offset="0" />
        <GradientStop Color="#FF596F7E" Offset="1" />
    </LinearGradientBrush>

    <!-- This is the area which contains the selected item in the ComboBox -->

    <ControlTemplate x:Key="ComboBoxTextBox" TargetType="{x:Type TextBox}">
        <!-- This must be named as PART_ContentHost -->
        <Border Style="{x:Null}" x:Name="PART_ContentHost" Focusable="False" Background="{TemplateBinding Background}" />
    </ControlTemplate>

    <ControlTemplate x:Key="Snoop.Templates.NoSelectionComboBox"
                     TargetType="{x:Type controls:NoSelectionComboBox}">
        <Grid Style="{x:Null}" x:Name="Grid">
            <Border Style="{x:Null}" x:Name="Border"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}">
                <ToggleButton x:Name="ToggleButton"
                              Style="{x:Null}"
                              IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                              ClickMode="Press"
                              Focusable="False">
                    <ToggleButton.Content>
                        <StackPanel Style="{x:Null}" Orientation="Horizontal">
                            <TextBlock Style="{x:Null}" Text="{TemplateBinding Header}" />
                            <Image Style="{x:Null}" Source="{DynamicResource downDrawingImage}"
                                   Width="8"
                                   Height="6"
                                   Margin="3 0 0 0" />
                        </StackPanel>
                    </ToggleButton.Content>
                </ToggleButton>
            </Border>

            <Popup x:Name="PART_Popup"
                   Style="{x:Null}"
                   IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource Mode=TemplatedParent, AncestorType={x:Null}}}"
                   Focusable="False"
                   Placement="Bottom"
                   PopupAnimation="Slide"
                   AllowsTransparency="True">
                <Grid x:Name="DropDown"
                      Style="{x:Null}"
                      MinWidth="{TemplateBinding ActualWidth}"
                      MaxHeight="{TemplateBinding MaxDropDownHeight}">
                    <Border x:Name="DropDownBorder"
                            Style="{x:Null}"
                            Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"
                            BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}"
                            BorderThickness="1,1,1,1" />
                    <Grid Style="{x:Null}"
                          Margin="1,1,1,1">
                        <Grid.RowDefinitions>
                            <RowDefinition Style="{x:Null}" Height="Auto" />
                            <RowDefinition Style="{x:Null}" Height="*" />
                        </Grid.RowDefinitions>

                        <Button Grid.Row="0"
                                Style="{x:Null}"
                                Command="{TemplateBinding ResetSettingsCommand}">
                            <TextBlock Style="{x:Null}">
                                Reset to default settings
                            </TextBlock>
                            <Button.ToolTip>
                                <TextBlock Style="{x:Null}" Text="{TemplateBinding ResetSettingsToolTip}" />
                            </Button.ToolTip>
                        </Button>

                        <ScrollViewer Grid.Row="1" x:Name="ScrollViewer" Style="{x:Null}" Margin="0 2 0 0">
                            <ItemsControl Style="{x:Null}"
                                          x:Name="PART_ItemsControl"
                                          ItemsSource="{Binding ItemsSource, RelativeSource={RelativeSource TemplatedParent}}"
                                          KeyboardNavigation.DirectionalNavigation="Contained">
                                <!--<ItemsControl.ItemsPanel>
                                    <ItemsPanelTemplate>
                                        <WrapPanel />
                                    </ItemsPanelTemplate>
                                </ItemsControl.ItemsPanel>-->
                            </ItemsControl>
                        </ScrollViewer>
                    </Grid>
                </Grid>
            </Popup>
        </Grid>

        <ControlTemplate.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsKeyboardFocusWithin" Value="True" />
                    <Condition Property="IsDropDownOpen" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
            </MultiTrigger>
            <Trigger Property="Popup.HasDropShadow" SourceName="PART_Popup" Value="True">
                <Setter Property="Margin" Value="0,0,3,3" TargetName="DropDown" />
                <Setter Property="SnapsToDevicePixels" Value="True" TargetName="DropDown" />
                <Setter Property="BitmapEffect" TargetName="DropDownBorder">
                    <Setter.Value>
                        <DropShadowBitmapEffect ShadowDepth="1.5" Softness="0.15" />
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="HasItems" Value="False">
                <Setter Property="MinHeight" Value="95" TargetName="DropDownBorder" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
            </Trigger>
            <Trigger Property="IsGrouping" Value="True">
                <Setter Property="ScrollViewer.CanContentScroll" Value="False" />
            </Trigger>
            <Trigger Property="Width" Value="Auto">
                <Setter Property="MinWidth" Value="150" />
            </Trigger>
            <Trigger Property="Height" Value="Auto">
                <Setter Property="MinHeight" Value="20" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style TargetType="{x:Type controls:NoSelectionComboBox}"
           x:Key="{x:Type controls:NoSelectionComboBox}"
           BasedOn="{x:Null}">
        <Setter Property="Template"
                Value="{StaticResource Snoop.Templates.NoSelectionComboBox}" />
    </Style>
</ResourceDictionary>